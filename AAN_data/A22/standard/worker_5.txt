We describe a practical parser for unre- stricted dependencies. 
The parser creates links between words and names the links according to their syntactic functions. 
In contrast, dependency schemes (e.g. , Sleator and Temperley, 1993; Tapanainen and Jarvinen, 1997; Carroll, et al. , forthcoming) do not 3 http://www.cis.upenn.edu/treebank provide a constituency analysis4 but rather specify grammatical relations among elements explicitly; for example, the sentence Paul intends to leave IBM could be represented as shown in Figure 2, where the predicate is the relation type, the first argument is the head, the second the dependent, and additional arguments may provide category-specific information (e.g. , introducer for prepositional phrases, etc.).
To identify associative constructions, we first process our texts using Conexors FDG parser (Tapanainen and Jarvinen, 1997).
The two grammar systems to compare are Link Grammar (Sleator and Temperley, 1993) and the Conexor Functional Dependency Grammar parser (Tapanainen and Jarvinen, 1997) (henceforth referred to as Conexor FDG).
Conexor FDG (Tapanainen and Jarvinen, 1997) is a commercial parser and grammar, based on the theory of Functional Dependency Grammar, and was originally developed at the University of Helsinki.
Parsing: After name classification, we apply a general English parser, from Conexor Oy, (Tapanainen and Jarvinen, 1997).
The rules for linking dependents to heads can specify constraints on the intervening material between them, so that, for instance, certain links may be prevented from crossing barriers such as punctuation or lexical items with certain parts of speech or morphological properties (Collins 1996; Giguet and Vergne 1997; Tapanainen and Jarvinen 1997).
This tagger is a rule-based, robust syntactic parser available for several languages and based on Constraint Grammar and Functional Dependency Grammar (Tapanainen and Jarvinen, 1997).
For English texts, these trees were first provided by the Connexor parser at UMIACS (Tapanainen and Jarvinen, 1997), and then corrected by one of the team PIs
4.2 Generating Dependency Patterns Three dependency parsers were used for these experiments: MINIPAR3 (Lin, 1999), the Machinese Syntax4 parser from Connexor Oy (Tapanainen and Jarvinen, 1997) and the Stanford5 parser (Klein and Manning, 2003).
We start by parsing the corpus with a dependency parser (we use Connexors FDG (Tapanainen and Jarvinen, 1997)), treating every verb with its dependent constituents as a clause.
The anaphora resolution module only handles rst and third person singular personal pronouns (I,me,my,he,his) and singular denite noun phrases that denote animate entities (e.g., the man,butnotmen).It is implemented in Java, within the GATE framework, using the Connexor Machinese Syntax parser (Tapanainen and Jarvinen 1997).
The first constraint potentially simplifies dependency parsing, and non-projective dependencies are relatively well understood in the dependency parsing community (Tapanainen and Jarvinen, 1997; McDonald et al., 2005).
In order to determine the head of noun phrases we use the FDG tagger (Tapanainen and Jarvinen, 1997) which also provides partial dependency relations between the constituents of a sentence.
