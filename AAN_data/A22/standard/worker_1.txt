We describe a practical parser for unre- stricted dependencies. 
The parser creates links between words and names the links according to their syntactic functions. 
We first describe the older Constraint Gram- mar parser where many of the ideas come from. 
Then we proceed to describe the cen- tral ideas of our new parser. 
Finally, the parser is evaluated.
In contrast, dependency schemes (e.g. , Sleator and Temperley, 1993; Tapanainen and Jarvinen, 1997; Carroll, et al. , forthcoming) do not 3 http://www.cis.upenn.edu/treebank provide a constituency analysis4 but rather specify grammatical relations among elements explicitly; for example, the sentence Paul intends to leave IBM could be represented as shown in Figure 2, where the predicate is the relation type, the first argument is the head, the second the dependent, and additional arguments may provide category-specific information (e.g. , introducer for prepositional phrases, etc.).
Additionally we used head-noun features that were obtained from preanalysis of the training data set using the FDG shallow parser from Conexor (Tapanainen and Jarvinen, 1997).
Conexor FDG (Tapanainen and Jarvinen, 1997) is a commercial parser and grammar, based on the theory of Functional Dependency Grammar, and was originally developed at the University of Helsinki.
The rules for linking dependents to heads can specify constraints on the intervening material between them, so that, for instance, certain links may be prevented from crossing barriers such as punctuation or lexical items with certain parts of speech or morphological properties (Collins 1996; Giguet and Vergne 1997; Tapanainen and Jarvinen 1997).
This tagger is a rule-based, robust syntactic parser available for several languages and based on Constraint Grammar and Functional Dependency Grammar (Tapanainen and Jarvinen, 1997).
4.2 Generating Dependency Patterns Three dependency parsers were used for these experiments: MINIPAR3 (Lin, 1999), the Machinese Syntax4 parser from Connexor Oy (Tapanainen and Jarvinen, 1997) and the Stanford5 parser (Klein and Manning, 2003).
The anaphora resolution module only handles rst and third person singular personal pronouns (I,me,my,he,his) and singular denite noun phrases that denote animate entities (e.g., the man,butnotmen).It is implemented in Java, within the GATE framework, using the Connexor Machinese Syntax parser (Tapanainen and Jarvinen 1997).
For English texts, these trees were first provided by the Connexor parser at UMIACS (Tapanainen and Jarvinen, 1997), and then corrected by one of the team PIs
We start by parsing the corpus with a dependency parser (we use Connexors FDG (Tapanainen and Jarvinen, 1997)), treating every verb with its dependent constituents as a clause.
Length in characters), calculated based on linguistic pre-processing made with the English Functional Dependency Grammar (Tapanainen and Jarvinen, 1997) (e.g., Case, Part-of-speech), fetched from precompiled lists of information (e.g., Is first name?), and features based on predictions concerning the context of the token (e.g, Class of previous token).
