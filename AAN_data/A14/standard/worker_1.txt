In order to realize the full potential ofdependency-based syntactic parsing, it isdesirable to allow non-projective depen-dency structures
We show how a data-driven deterministic dependency parser,in itself restricted to projective structures,can be combined with graph transforma-tion techniques to produce non-projectivestructures
The projectivization algorithm (Nivre and Nilsson, 2005) iteratively moves each nonprojective arc upward in the tree until the whole tree is projective
, 2006), the encoding scheme called HEAD in (Nivre and Nilsson, 2005) was used to encode the original non-projective dependencies in the labels of the projectivized dependency tree
For treebanks with non-projective trees we use the pseudo-projective parsing technique to transform the treebank into projective structures (Nivre and Nilsson, 2005)
However, recent results in non-projective dependency parsing, especially using data-driven methods, indicate that most non-projective structures required for the analysis of natural language are very nearly projective, differing only minimally from the best projective approximation (Nivre and Nilsson, 2005; Hall and Novk, 2005; McDonald and Pereira, 2006)
Since the number of non-projective dependencies is much smaller than the number of projective dependencies (Nivre and Nilsson, 2005), it is not efficient to perform non-projective parsing for all cases
4 Non-ProjectiveAnother interesting line of future work is to try to parse discontinuous constituents by using 53 a non-projective parsing algorithm like the Covington algorithm (Covington, 2001) or using pseudoprojective parsing for discontinuous constituency parsing (Nivre and Nilsson, 2005)
Relations For handling non-projective relations, Nivre and Nilsson (2005) suggested applying a preprocessing step to a dependency parser, which consists in lifting non-projective arcs to their head repeatedly, until the tree becomes pseudo-projective
All non-projective dependencies in the training and gold sets were projectivized prior to training and parsing using the algorithm of Nivre and Nilsson (2005)
To simplify implementation, we instead opted for the pseudo-projective approach (Nivre and Nilsson, 2005), in which nonprojective links are lifted upwards in the tree to achieve projectivity, and special trace labels are used to enable recovery of the nonprojective links at parse time
In order to avoid losing the benets of higher-order parsing, we considered applying pseudo-projective transformation (Nivre and Nilsson, 2005)
Although the parser only derives projective graphs, the fact that these graphs are labeled allows non-projective dependencies to be captured using the pseudo-projective approach of Nivre and Nilsson (2005) (section 3
We used a pseudo-projective edge label encoding to handle nonprojectivity (Nivre and Nilsson, 2005)
Most of this work has so far focused either on post-processing to recover non-local dependencies from context-free parse trees (Johnson, 2002; Jijkoun and De Rijke, 2004; Levy and Manning, 2004; Campbell, 2004), or on incorporating nonlocal dependency information in nonterminal categories in constituency representations (Dienes and Dubey, 2003; Hockenmaier, 2003; Cahill et al
