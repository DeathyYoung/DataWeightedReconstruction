We introduce a new approach to planning in STRIPS-like domains based on con- structing and analyzing a compact structure we call a Planning Graph
Graphplan always returns a shortest- possible partial-order plan, or states that no valid plan exists
We provide empirical evidence in favor of this approach, showing that Graphplan outperforms the total-order planner, Prodigy, and the partial-order planner, UCPOP, on a variety of interesting natural and artificial planning problems
In recent years, however, the situation has changed: in the presence of deterministic actions and full knowledge about the initial situation, classical planning algorithms can find plans quickly even in large problems with hundred of variables and actions [3,4]
Although similar problems have been studied in the past using artificial intelligence techniques to search the domain of potential solutions [1-3], the cases described in this paper presented a number of formidable challenges both methodologically and computationally
Intelligent planning is increasingly becoming very hot in AI and has developed a large number of attractive approaches for solving planning problems, such as Graphplan [1], propositional satisfiability methods [2], parallel search methods and so on
The action graph data structure was initially defined as a particular class of subgraphs of the planning graph representation [3], and subsequently it has been modified and extended for representing temporal information [15,17]
A standard technique to compute this relaxation consists of generating a relaxed graph-plan following GRAPHPLAN (Blum & Furst 1995)
? A planner, based on the GraphPlan algorithm [2], that is able to automatically configure appliances to enable the user¡¯s desired content flows
We exactly follow the standard GraphPlan algorithm [8] except the part for solving the problem of finding supporting actions for a goal
Graph based planning Graph based planning utilizes planning graph [1] as a heuristic to constrain the search for plans
language is highly expressive and can also specify negative behavior, and more, and it has been extended to include, among other things, time, forbidden elements, and symbolic instances (i
The heuristics presented here are based on the well-known technique of computing a relaxed planning graph(Hoffmann and Nebel, 2001), which is the graph that would be generated by GRAPHPLAN (Blum and Furst, 1997) on the STRIPS relaxed planning instance that ignores negative effects
We adopt the classical planning notion of mutual exclusion (Blum & Furst, 1997) and apply it to the factored action representation of probabilistic STRIPS
An LA-graph can be seen as a variant of the well-known planning graph [3] representation for propositional (STRIPSlike) planning problems
