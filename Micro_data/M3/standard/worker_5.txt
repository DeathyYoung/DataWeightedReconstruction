We present a method to construct real-time systems using as components anytime algo- rithms whose quality of results degrades grace­ fully as computation time decreases
Introduc­ ing computation time as a degree of freedom defines a scheduling problem involving the ac­ tivation and interruption of the anytime com­ ponents
This scheduling problem is especially complicated when trying to construct inter- ruptible algorithms, whose total run-time is un­ known in advance
We introduce a framework to measure the performance of anytime algo­ rithms and solve the problem of constructing interruptible algorithms by a mathematical re­ duction to the problem of constructing con­ tract algorithms, which require the determi­ nation of the total run-time when activated
We show how the composition of anytime algo­ rithms can be mechanized as part of a compiler for a LISP-like programming language for real- time systems
The result is a new approach to the construction of complex real-time sys­ tems that separates the arrangement of the per­ formance components from the optimization of their scheduling, and automates the latter task
For performance requirements, Russell and Zilberstein [16] approach composability by using socalled anytime algorithms that are characterized by a probabilistic description of the quality of results as a function of time
The only disadvantage of CCEL is the training speed: the solution of a middlesize problem takes a few minutes on usual PC
According to (Russell & Zilberstein 1991), the optimal time allocation for each subsequent call is an exponential increase, in the sequence: t, 2t, 4t,
Design-to-Criteria [32, 41, 45] traces its ancestry to the ideas of Design-to-Time [13, 15, 16] scheduling and to research in flexible computation [22] and anytime algorithms [6, 33, 50, 51]
So we observe the performance profile of the search, that is the quality improvement over time [20], in order to deduce an appropriate termination criterion
In practice we expect to use the search methods as contract algorithms (Russell & Zilberstein 1991) where the allocation of resources (or the requirement for the number of goals) are given as input to the algorithm
The approximating sequent calculus proposed here makes it possible to define multi-directional approximations and can be used to generate a sequence of approximate proof (classical-like) which converge to a classical proof with the performance guarantee required by anytime algorithms[20]
A useful distinction has been made between two types of anytime algorithm, namely, interruptible and contract algorithms (Russell and Zilberstein 1991)
In those appIications where it is necessary to use an interruptible algorithm, the contract algorithm can be transformed into an interruptible one using a construction method presented in (Russell and Zilberstein, 1991)
