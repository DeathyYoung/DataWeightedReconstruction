We present a method to construct real-time systems using as components anytime algo- rithms whose quality of results degrades grace­ fully as computation time decreases
We introduce a framework to measure the performance of anytime algo­ rithms and solve the problem of constructing interruptible algorithms by a mathematical re­ duction to the problem of constructing con­ tract algorithms, which require the determi­ nation of the total run-time when activated
The result is a new approach to the construction of complex real-time sys­ tems that separates the arrangement of the per­ formance components from the optimization of their scheduling, and automates the latter task
Many existing planning algorithms can be considered contract algorithms, and depth-limited planning is one of them (Zilberstein & Russell 1995, Russell & Zilberstein 1991)
Such algorithms, called contract algorithms [18], require the amount of run-time to be determined prior to their activation
Much work in flexible computation makes use of anytime algorithms [6, 33, 51], algorithms that always have an answer at hand and produce higher quality results as they are given more time, up to a threshold
Anytime Property: Any-time contract algorithms are planning methods that can solve planning tasks for any given bound on their planning time, and their solution quality increases with the available planning time (Russell and Zilberstein 1991)
The approximating sequent calculus proposed here makes it possible to define multi-directional approximations and can be used to generate a sequence of approximate proof (classical-like) which converge to a classical proof with the performance guarantee required by anytime algorithms[20]
Much work in flexible com putation makes use of anytime algorithms [6, 33, 49], algorithms that always have an answer at hand and produce higher quality results as they are given more time, up to a threshold
In [20] we make an important distinction between two types of anytime algorithms, namely interruptible and contract algorithms
In the anytime algorithm approach[3, 13] there is a single iterative refinement method for each task that returns an answer with monotonically increasing value as the method is given more processing time
Much work in flexible computation makes use of anytime algorithms (Dean & Boddy 1988; Russell & Zilberstein 1991; Zilberstein & Russell 1995), algorithms that always have an answer at hand and produce higher quality results as they are given more time, up to a threshold
(Bernstein, Finkelstein, and Zilberstein 2003) define the class of cyclic schedules as schedules which have the following natural properties: Let Pci be the problem instance worked on by contractci
In [20] we show that a simple, general construction can produce an interruptible version for any given contract algorithm
(However, this is not true for the contract anytime algorithms generated by the compilation techniques of Zilberstein [13]
